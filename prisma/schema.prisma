generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  name           String?
  password       String?    // Made optional for OAuth users
  role           UserRole   @default(CUSTOMER)
  status         UserStatus @default(ACTIVE)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastLogin      DateTime?
  emailVerified  DateTime?  // Required for NextAuth
  image          String?    // For OAuth profile images

  orders    Order[]
  cartItems CartItem[]
  accounts  Account[]  // For OAuth accounts
  sessions  Session[]  // For user sessions
  
  // Post-delivery relationships
  reviews        ProductReview[]
  returnRequests ReturnRequest[]
  supportTickets SupportTicket[]

  @@map("users")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String
  category       ProductCategory
  price          Float
  wholesalePrice Float
  stock          Int
  minStock       Int             @default(10)
  unit           String
  image          String?
  status         ProductStatus   @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    ProductReview[]

  @@map("products")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Float
  shippingCost    Float
  tax             Float
  total           Float
  trackingNumber  String?
  shippingName    String
  shippingPhone   String
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingPincode String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  orderItems OrderItem[]
  
  // Post-delivery relationships
  reviews        ProductReview[]
  returnRequests ReturnRequest[]
  supportTickets SupportTicket[]

  @@map("orders")
}

model OrderItem {
  id        String    @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  orderType OrderType

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  
  // Post-delivery relationships
  returnRequests ReturnRequest[]

  @@map("order_items")
}

model CartItem {
  id        String    @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  orderType OrderType @default(RETAIL)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Settings {
  id    String      @id @default(cuid())
  key   String      @unique
  value String
  type  SettingType @default(STRING)

  @@map("settings")
}

enum UserRole {
  CUSTOMER
  RETAILER
  WHOLESALER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ProductCategory {
  FRUITS
  AROMATICS
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  ONLINE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

enum OrderType {
  RETAIL
  WHOLESALE
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// New enums for post-delivery features
enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReturnReason {
  DAMAGED
  WRONG_ITEM
  NOT_AS_DESCRIBED
  QUALITY_ISSUE
  EXPIRED
  OTHER
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  REFUNDED
  COMPLETED
}

enum TicketCategory {
  ORDER_ISSUE
  PRODUCT_QUALITY
  DELIVERY_PROBLEM
  PAYMENT_ISSUE
  ACCOUNT_HELP
  GENERAL_INQUIRY
  COMPLAINT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Post-delivery models
model ProductReview {
  id        String   @id @default(cuid())
  userId    String
  productId String
  orderId   String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  images    String[] // Array of image URLs
  isVerified Boolean @default(false) // Verified purchase
  status    ReviewStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, orderId]) // One review per product per order
  @@map("product_reviews")
}

model ReturnRequest {
  id           String       @id @default(cuid())
  userId       String
  orderId      String
  orderItemId  String?      // Specific item or entire order
  reason       ReturnReason
  description  String
  images       String[]     // Photos of damaged/wrong items
  status       ReturnStatus @default(PENDING)
  adminNotes   String?
  refundAmount Float?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  processedAt  DateTime?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: SetNull)

  @@map("return_requests")
}

model SupportTicket {
  id          String        @id @default(cuid())
  userId      String
  orderId     String?       // Optional order reference
  subject     String
  description String
  category    TicketCategory
  priority    TicketPriority @default(MEDIUM)
  status      TicketStatus   @default(OPEN)
  adminNotes  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  resolvedAt  DateTime?

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map("support_tickets")
}
